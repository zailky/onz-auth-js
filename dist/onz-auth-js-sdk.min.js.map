{"version":3,"file":"onz-auth-js-sdk.min.js","mappings":"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","sources":["webpack://onz/webpack/universalModuleDefinition","webpack://onz/./src/lib/event-emiter.js","webpack://onz/./src/constants.js","webpack://onz/./src/login/login.js","webpack://onz/./src/onz-auth.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"onz\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"onz\"] = factory();\n\telse\n\t\troot[\"onz\"] = factory();\n})(self, function() {\nreturn ","class EventEmitter {\n    constructor() {\n        this.events = {};\n    }\n\n    _getEventListByName(eventName) {\n        if (typeof this.events[eventName] === 'undefined') {\n            this.events[eventName] = new Set();\n        }\n        return this.events[eventName];\n    }\n\n    on(eventName, fn) {\n        this._getEventListByName(eventName).add(fn);\n    }\n\n    once(eventName, fn) {\n        const self = this;\n\n        const onceFn = (...args) => {\n            self.removeListener(eventName, onceFn);\n            fn.apply(self, args);\n        };\n        this.on(eventName, onceFn);\n    }\n\n    emit(eventName, ...args) {\n        this._getEventListByName(eventName).forEach(\n            // eslint-disable-next-line func-names\n            function (fn) {\n                fn.apply(this, args);\n            }.bind(this)\n        );\n    }\n\n    removeListener(eventName, fn) {\n        this._getEventListByName(eventName).delete(fn);\n    }\n}\n\nexport default EventEmitter;","export const OnzAuthEnum = Object.freeze({ \n    Production: {\n        AuthUrl: 'https://auth.zailky.com',\n        IdpUrl: 'https://idp.zailky.com',\n        IdpApiUrl: 'https://idp-api.zailky.com'\n    },\n    Development: {\n        AuthUrl: 'https://auth-develop.zailky.com',\n        IdpUrl: 'https://idp-develop.zailky.com',\n        IdpApiUrl: 'https://idp-api-develop.zailky.com'\n    }\n});\n\nexport const OnzEvents = Object.freeze({    \n    OnAuthenticationFailure: 'authentication-failure',    \n    OnAuthenticated: 'authenticated',\n    OnClosed: 'closed',\n    OnError: 'error',\n    OnRefreshed: 'refreshed',\n    OnRefreshFailure: 'refresh-failure'\n});","import zoid from 'zoid';\n\nexport const OnzLoginComponent = zoid.create({\n    // The html tag used to render my component\n\n    tag: 'onz-login-component',\n\n    // The url that will be loaded in the iframe or popup, when someone includes my component on their page\n\n    url: ({ props }) => {\n        //return new URL('dummy.htm', window.location.href).href;\n        //return \"https://idp-develop.zailky.com/signin\"\n        return new URL('signin', props.apiURL).href;\n    },\n\n    // The size of the component on their page. Only px and % strings are supported\n    dimensions: {\n        width: '400px',\n        height: '600px'\n    },\n    // The properties they can (or must) pass down to my component. This is optional.\n\n    props: {\n        apiURL: {\n            type: 'string',\n            required: true\n        },\n        clientID: {\n            type: 'string',\n            required: false,\n            queryParam: 'client_id'\n        },\n        onLogin: {\n            type: 'function',\n            required: true\n        },\n        onLoginError: {\n            type: 'function',\n            required: true\n        }\n    },\n});\n","import EventEmitter from './lib/event-emiter';\nimport { OnzAuthEnum, OnzEvents } from './constants';\nimport { OnzLoginComponent } from './login';\nimport axios from 'axios';\n\n/**\n * Handles all the browser's authentication flows\n * @constructor\n * @param {Object} options\n * @param {String} options.clientID the Client ID found on your project overview page\n * @param {String} [options.containerID] the element container id, will default to 'container'\n * @param {String} [options.isIframe] boolean value indicating whether it is a popup or iframe\n * @param {String} [options.mode] 'production' or 'development', defaults to 'production'\n */\nexport class Auth extends EventEmitter {\n    constructor(options) {\n        super();\n        if (!options) {\n            throw new Exception(\"invalid auth options\");\n        }\n        if (!options.clientID) {\n            throw new Exception(\"invalid clientID\");\n        }\n        this.clientID = options.clientID;\n        this.containerID = options.containerID ?? 'container';\n        this.isIframe = !!options.isIframe ? 'iframe' : 'popup';\n        this.mode = options.mode ?? 'production';\n        \n        this._initialiseURL();\n        this._initialiseComponent();\n    }\n\n    _initialiseURL() {\n        if (this.mode === 'development') {\n            this.urls = OnzAuthEnum.Development;\n        } else {\n            this.urls = OnzAuthEnum.Production;\n        }\n    }\n\n    _initialiseComponent() {\n        this.component = OnzLoginComponent({\n            clientID: this.clientID,\n            apiURL: this.urls.IdpUrl,\n            onLogin: function (authResult) {\n                console.log(OnzEvents.OnAuthenticated, authResult);\n                this.emit(OnzEvents.OnAuthenticated, authResult);\n            },\n            onLoginError: function (errorMessage) {\n                console.log(OnzEvents.OnError, errorMessage);\n                this.emit(OnzEvents.OnError, errorMessage);\n            },\n            onClose: () => {\n                console.log(OnzEvents.OnClosed);\n                this.emit(OnzEvents.OnClosed);\n            },\n            onError: (err) => {\n                const message = err.message ? err.message.toString() : '';\n                console.log(message);\n                this.emit(OnzEvents.OnError, err);\n            }\n        });\n    }\n    \n    showLogin() {\n        this.component.render(`#${this.containerID}`, this.isIframe);\n    }\n\n    refreshAccessToken() {\n\n    }\n\n    signOut() {\n\n    }\n\n    isAuthenticated() {\n\n    }\n\n    getOAuthTokens() {\n\n    }\n\n    getAccessToken() {\n\n    }\n\n    getDecodedAccessToken() {\n\n    }\n\n    getIDToken() {\n\n    }\n\n    getDecodedIdToken() {\n\n    }\n\n    getRefreshToken() {\n\n    }\n}"],"names":["root","factory","exports","module","define","amd","self","EventEmitter","this","events","eventName","Set","fn","_getEventListByName","add","on","onceFn","removeListener","args","apply","forEach","bind","OnzAuthEnum","Object","freeze","Production","AuthUrl","IdpUrl","IdpApiUrl","Development","OnzEvents","OnAuthenticationFailure","OnAuthenticated","OnClosed","OnError","OnRefreshed","OnRefreshFailure","OnzLoginComponent","zoid","tag","url","props","URL","apiURL","href","dimensions","width","height","type","required","clientID","queryParam","onLogin","onLoginError","Auth","options","Exception","containerID","isIframe","mode","_initialiseURL","_initialiseComponent","urls","component","authResult","console","log","emit","errorMessage","onClose","onError","err","message","toString","render"],"sourceRoot":""}